WHITESPACE = _{ (" " | NEWLINE | "\t")+ }

COMMENT = _{
    "//" ~ (!NEWLINE ~ ANY)*
  | "/*" ~ (!"*/" ~ ANY)*
}

program = {
    SOI ~ (import | struct_def | function_def | function_import)* ~ EOI
}

import = { "import" ~ identifier }

int_number = @{
    ASCII_DIGIT ~ (ASCII_DIGIT | "_")*
}

float_number = @{
    int_number ~ "." ~ int_number
  | int_number ~ "."
  | "." ~ int_number
}

number_literal = {
    "-"* ~ (int_number | float_number)
}

char_literal = {
    "'" ~ ANY ~ "'"
}

string_literal = {
    ("\"" ~ ("\\\"" | !("\"") ~ ANY)* ~ "\"")+
}

literals = { char_literal | string_literal | number_literal }

type = {
    identifier
  | ptr_type
  | array_type
}

ptr_type   = { "*" ~ type }
array_type = { "[" ~ type ~ ";" ~ int_number ~ "]" }
array_def  = { "[" ~ type ~ ";" ~ expr ~ "]" }

exportk = { "export" }

arg = { identifier ~ ":" ~ type ~ "," }

struct_def = { exportk? ~ "struct" ~ identifier ~ ("as" ~ identifier)? ~ "{" ~ arg* ~ "}" }

function_def = { exportk? ~ "func" ~ identifier ~ ":" ~ ":" ~ arg* ~ "->" ~ type ~ code_block }

function_import = { "import" ~ "func" ~ identifier ~ ":" ~ ":" ~ arg* ~ "->" ~ type ~ ("as" ~ identifier)? }

code_block = { "{" ~ statement* ~ "}" }

statement = {
    ret
  | brk
  | cti
  | if_block
  | for_block
  | code_block
  | (assigment | declarationinit | declaration | expr) ~ ";"
}

ret = { "ret" ~ expr ~ ";" }
cti = { "cti" ~ ";" }
brk = { "brk" ~ ";" }

declaration     = { identifier ~ ":" ~ (type | array_def) ~ !"," }
declarationinit = { declaration ~ "=" ~ expr }
assigment       = { expr ~ "=" ~ expr }

if_block  =  { "if" ~ expr ~ code_block ~ ("else" ~ (code_block | wraper_if))? }
wraper_if =  { if_block }
for_block = _{ for_while | for_c | for_loop }

for_while = {
    "for" ~ expr ~ code_block
}

for_c = { "for" ~ statement ~ expr ~ ";" ~ statement ~ code_block }

for_loop = { "for" ~ code_block }

prefix = _{
    dref
  | to_ptr
  | minus
  | lnot
  | bnot
}

lnot = { "!" }
bnot = { "~" }

infix = _{
    plus
  | minus
  | asterix
  | div
  | modulo
  | binary
  | logical
}

plus    = { "+" }
minus   = { "-" }
asterix = { "*" }
div     = { "/" }
modulo  = { "%" }

logical = {
    leq
  | lless
  | llesseq
  | lmore
  | lmoreeq
  | lneq
  | land
  | lor
}

leq     = { "==" }
lless   = { "<" }
llesseq = { "<=" }
lmore   = { ">" }
lmoreeq = { ">=" }
lneq    = { "!=" }
land    = { "&&" }
lor     = { "||" }

binary = {
    band
  | bor
  | bxor
  | bshiftr
  | bshiftl
}

band    = { "&" }
bor     = { "|" }
bxor    = { "^" }
bshiftr = { ">>" }
bshiftl = { "<<" }

size_ofe = { "size_of" ~ ":" ~ ":" ~ type ~ "," }

func_call_ = { identifier ~ ":" ~ ":" ~ (expr ~ ",")* }

func_call = { size_ofe | func_call_ }

primary = _{ func_call | identifier | literals | "(" ~ expr ~ ")" }

dref   = { "*" }
to_ptr = { "&" }

postfix = _{ type_change | element | index }

type_change = { ("as" ~ type) }
element     = { "." ~ identifier }
index       = { "[" ~ expr ~ "]" }

expr = {
    prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix*)*
}

reserved_keywords = {
    "import"
  | "if"
  | "for"
  | "break"
  | "func"
  | "struct"
  | "size_of"
  | "ret"
  | "cti"
  | "brk"
}

identifier = @{
    !reserved_keywords ~ (LETTER | "_") ~ (LETTER | ASCII_DIGIT | "_")*
  | reserved_keywords ~ (LETTER | ASCII_DIGIT | "_")+
}
